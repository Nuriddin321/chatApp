@page "/groups"
@using Dtos
@using Microsoft.AspNetCore.SignalR.Client
@inject HttpClient Http
@inject IDialogService DialogService

<h3>Groups</h3>
<h3>Username: @userName </h3>

<br>

@* <MudButton @onclick="OpenDialog" Variant="Variant.Filled" Color="Color.Primary">
    Open Dialog
    </MudButton> *@


@if (_groups.Count <= 0 || _groups is null)
{
    <p>Create new group or go to public chat</p><br>
    <MudLink Href="/"> Public chat </MudLink><br>
}
else
{
    @foreach (var group in _groups)
    {
        @* var groupLink = $"/groups/{group.Name}";
            <MudButton Href="@groupLink" Variant="Variant.Filled" Color="Color.Primary">@group.Name</MudButton><br><br> *@

        //if user isadmin true || user shu groupga tegishli bo'lsa primoy kiradi
        //else cherez okoshka orqali

        @if (userName == group.User.Username )
        {
            <p> sho'tga keldi is admin o'xshadi</p>
             var groupLink = $"/groups/{group.Name}";
            <MudText Href="@groupLink" Variant="Variant.Filled" Color="Color.Error">@group.Name</MudText><br><br>
           
        }
        else
        {
            <MudButton @onclick="OpenDialog" Variant="Variant.Filled" Color="Color.Primary">
                @group.Name
            </MudButton> <br><br>
        }
    }
}

<br><br><br><br>

<MudTextField @bind-Value="groupName" Label="Create Group" Variant="Variant.Outlined"></MudTextField>
<MudButton OnClick="CreateGroup" Variant="Variant.Filled">Create</MudButton>


@code {
    private List<ChatGroup>? _groups = new();
    private string? groupName;
    private string? userName;

    private HubConnection? _hubConnection;
    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
        .WithUrl("https://localhost:7248/jeki") // jeki routi apini program.csda yozilgan
        .Build();
        
        userName = await Http.GetStringAsync("https://localhost:7248/api/Account/profile");

        _hubConnection?.On<List<ChatGroup>, string>("GroupCreated", GetGroup);
        await _hubConnection?.StartAsync();

        _groups = await Http.GetFromJsonAsync<List<ChatGroup>>("https://localhost:7248/api/Account/groups");
         
    }

    private void GetGroup(List<ChatGroup> group, string username)
    {
        _groups = group;
       // userName = username;
        StateHasChanged();
    }

    private async Task CreateGroup()
    {
        if (_hubConnection?.State == HubConnectionState.Connected)
        {
            var number = new Random().Next(1, 10000);
            var randomGroupName = "group" + number;
            await _hubConnection.InvokeAsync("CreateChatGroup", groupName ?? randomGroupName);
        }
    }


    void OpenDialog()
    {
        DialogOptions closeOnEscapeKey = new DialogOptions() { CloseOnEscapeKey = true };

        DialogService.Show<Dialog>("Enter a key", closeOnEscapeKey);
    }
}