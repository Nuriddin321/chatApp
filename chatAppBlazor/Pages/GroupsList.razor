@page "/groups"
@using Dtos
@using Microsoft.AspNetCore.SignalR.Client
@inject HttpClient Http
@inject IDialogService DialogService

<h3>Groups</h3>
<h3>Username: @_groups.Item2.UserName </h3>

<br>

@if (_groups.Item1.Count <= 0)
{
    <p>Create new group or go to public chat</p><br>
    <MudLink Href="/"> Public chat </MudLink><br>
}
else
{
    @foreach (var group in _groups.Item1)
    {  
        @if (_groups.Item2.UserName == group.User.UserName)
        {
            var groupLink = $"/groups/{group.Name}";
            <MudButton Href="@groupLink" Variant="Variant.Filled" Color="Color.Success">@group.Name</MudButton><br><br>

        }
        else
        {
            <MudButton @onclick="OpenDialog" Variant="Variant.Filled" Color="Color.Primary">
                @group.Name
            </MudButton> <br><br>
        }

    }
}

<br><br><br><br>

<MudTextField @bind-Value="groupName" Label="Create Group" Variant="Variant.Outlined"></MudTextField>
<MudButton OnClick="CreateGroup" Variant="Variant.Filled">Create</MudButton>


@code {
    private Tuple<List<ChatGroup>?, AppUserDto?>? _groups = new Tuple<List<ChatGroup>?, AppUserDto?>(new(), new());
    private string? groupName;

    private HubConnection? _hubConnection;

    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
        .WithUrl("https://localhost:7248/jeki")
        .Build();


        _hubConnection?.On<Tuple<List<ChatGroup>?, AppUserDto?>?>("GroupCreated", GetGroup);

        await _hubConnection?.StartAsync();

       var request = new HttpRequestMessage(HttpMethod.Get, "https://localhost:7248/api/Account/groups");
      
       request.SetBrowserRequestCredentials(BrowserRequestCredentials.Include); // bu browserdan cookilarini opkeladi
       
       _groups = await (await Http.SendAsync(request)).Content.ReadFromJsonAsync<Tuple<List<ChatGroup>?, AppUserDto?>?>();

    }

    private void GetGroup(Tuple<List<ChatGroup>?, AppUserDto?>? group)
    {
        _groups = group;
        StateHasChanged();
    }

    private async Task CreateGroup()
    {
        if (_hubConnection?.State == HubConnectionState.Connected)
        {
            var number = new Random().Next(1, 10000);
            var randomGroupName = "group" + number;
            await _hubConnection.InvokeAsync("CreateChatGroup", groupName ?? randomGroupName);
        }
    }

    void OpenDialog()
    {
        DialogOptions closeOnEscapeKey = new DialogOptions() { CloseOnEscapeKey = true };

        DialogService.Show<Dialog>("Enter a key", closeOnEscapeKey);
    }
}